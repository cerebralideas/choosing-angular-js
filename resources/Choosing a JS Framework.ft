# Choosing a JS Framework

## What is the skill-set of your team?

## Who is the creator of the framework?

"The essential premise at the heart of Backbone has always been to try and discover the minimal set of data-structuring (Models and Collections) and user interface (Views and URLs) primitives …

In an ecosystem where overarching, decides-everything-for-you frameworks are commonplace, and many libraries require your site to be restructured to suit their look, feel, and default behavior — Backbone should continue to be a tool that gives you the freedom to design the full experience of your web application."

— [Jeremy Ashkenas](http://ashkenas.com/backbonejs-1.0/)

"HTML is great for declaring static documents, but it falters when we try to use it for declaring dynamic views in web-applications. AngularJS lets you extend HTML vocabulary for your application. The resulting environment is extraordinarily expressive, readable, and quick to develop."

— [AngularJS Team](http://angularjs.org/)

"Write dramatically less code with Ember's Handlebars integrated templates that update automatically when the underlying data changes.

Don't waste time making trivial choices. Ember.js incorporates common idioms so you can focus on what makes your app special, not reinventing the wheel."

— [Ember Team](http://emberjs.com/about/)

## What kind of problem solving philosophy does the framework use?

- Are problems solved with JS?
- Are problems solved with a bigger API?
- How opinionated is the framework?

## How does the framework solve common problems of development?

- templating
- data-binding
- routing
- bootstraping
- data management

## How large is the framework's community?

## How frequently is the framework updated?

## How many dependencies does the framework need?
- Backbone requires both jQuery and Underscore. Total size:


# Why I Choose AngularJS

## Views are in real HTML, no JavaScript strings
- HTML is intuitive for those that are non-JavaScripters
- Strong separation of concerns
- Event binding is easier
- Back-end devs that hate JS have limited exposure
- You views are compatible with other frameworks, especially back-end technologies, like PHP.

## (Perceived) performance is faster
- No blank page prior to JS parsing
- HTML can be parsed and rendered without any JS dependencies
- AngularJS library is relatively small, so execution time on load is quicker (as long as *your* code is well written).

## Model is made of raw JS objects/arrays
- Data is not wrapped in proprietary wrapper objects
- The JSON your send and receive over the wire is what you use
- Manipulation of your data is much more intuitive when it's just objects/arrays.

## Dependency Injection!

## Smaller API gets out of your way