# Choosing a JS Framework

## What is the skill-set of your team?

## Who is the creator of the framework?

## What kind of problem solving philosophy does the framework use?

- Are problems solved with JS?
- Are problems solved with a bigger API?
- How opinionated is the framework?

## How does the framework solve common problems of development?

- templating
- data-binding
- routing
- bootstraping
- data management

## How large is the framework's community?

## How frequently is the framework updated?

## How many dependencies does the framework need?
- Backbone requires both jQuery and Underscore. Total size:


# Why I Choose AngularJS

## Views are in real HTML, no JavaScript strings
- HTML is intuitive for those that are non-JavaScripters
- Strong separation of concerns
- Event binding is easier
- Back-end devs that hate JS have limited exposure
- You views are compatible with other frameworks, especially back-end technologies, like PHP.

## (Perceived) performance is faster
- No blank page prior to JS parsing
- HTML can be parsed and rendered without any JS dependencies
- AngularJS library is relatively small, so execution time on load is quicker (as long as *your* code is well written).

## Model is made of raw JS objects/arrays
- Data is not wrapped in proprietary wrapper objects
- The JSON your send and receive over the wire is what you use
- Manipulation of your data is much more intuitive when it's just objects/arrays.

## Dependency Injection!

## Smaller API gets out of your way